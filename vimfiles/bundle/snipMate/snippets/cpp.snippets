# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) 
	{
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
		{
			v.insert(v.end(), buf, buf + len);
		}
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
# Class
snippet cl
	class ${1:`Filename('$1', 'name')`} 
	{
	public:
		$1(${2});
		virtual ~$1();
	
	private:
		${3:/* data */}
	};

# Class define
snippet cd
	${1:`Filename('$1', 'name')`}::$1()
	{
	}

	$1::~$1()
	{
	}

#for iterator
snippet forit
	for(${1:it}=${2:vec->}begin(); $1!=$2end(); ++$1)
	{
		${3:/* code */}
	}

# Singleton Class
snippet singleton
	class ${1:`Filename('$1', 'name')`} 
	{
	public:
		virtual ~$1();
		static $1* instance();
	
	protected:
		$1(${2});

	private:
		${3:/* data */}

		static $1*  _s_ins;
	};

# Singleton Class
snippet simp
	${1:`Filename('$1', 'name')`}::$1()
	{
	}

	${1:`Filename('$1', 'name')`}::~$1()
	{
	}

	$1* $1::_s_ins = NULL;
	$1* $1::instance()
	{
		if(NULL == _s_ins)
		{
			_s_ins = new $1();
		}

		return _s_ins;
	}

